// Generated by CoffeeScript 1.10.0
var Certificate, Client, Request, Support, async, querystring, r, requests,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

r = require('request');

async = require('async');

querystring = require('querystring');

requests = require('./requests.js');

Request = (function() {
  function Request(client) {
    this.client = client;
    this.scheduleValidationCall = bind(this.scheduleValidationCall, this);
    this.retryDCV = bind(this.retryDCV, this);
    this.uploadDocument = bind(this.uploadDocument, this);
    this.get = bind(this.get, this);
    this.send = bind(this.send, this);
    this.create = bind(this.create, this);
    this.all = bind(this.all, this);
  }

  Request.prototype.all = function(callback) {
    requests = [];
    return this.client.get("requests", {
      page: 1
    }, (function(_this) {
      return function(err, result) {
        var page, pages;
        requests = result._embedded.requests;
        page = result.page;
        pages = result.pages;
        return async.until(function() {
          return pages === page;
        }, function(cb) {
          _this.client.get("requests", {
            page: page + 1
          }, function(err, result) {
            requests = requests.concat(result._embedded.requests);
            page = result.page;
            pages = result.pages;
            return cb(err);
          });
        }, function(err) {
          callback(err, requests);
        });
      };
    })(this));
  };

  Request.prototype.create = function(product, years, csr, dcvType) {
    return new requests.CreateCertificateRequest(product, years, csr, dcvType);
  };

  Request.prototype.send = function(request, callback) {
    return this.client.post("requests", request.toArray(), callback);
  };

  Request.prototype.get = function(id, callback) {
    return this.client.get("requests/" + id, {}, (function(_this) {
      return function(err, result) {
        return callback(err, result);
      };
    })(this));
  };

  Request.prototype.uploadDocument = function(id, document, description, callback) {
    return this.client.post("requests/" + id + "/upload-document", {
      document: document,
      description: description
    }, callback);
  };

  Request.prototype.retryDCV = function(id, domain, dcvType, email, callback) {
    if (email == null) {
      email = '';
    }
    return this.client.post("requests/" + id + "/retry-dcv", {
      domain: domain,
      dcvType: dcvType,
      email: email
    }, callback);
  };

  Request.prototype.scheduleValidationCall = function(id, dateTime, callback) {
    return this.client.post("requests/" + id + "/schedule-validation-call", {
      date: dateTime.toISOString().split('T')[0],
      time: dateTime.toISOString().split('T')[1].split('.')[0]
    }, callback);
  };

  return Request;

})();

Certificate = (function() {
  function Certificate(client) {
    this.client = client;
    this.cancel = bind(this.cancel, this);
    this.renew = bind(this.renew, this);
    this.reissue = bind(this.reissue, this);
    this.download = bind(this.download, this);
    this.get = bind(this.get, this);
    this.all = bind(this.all, this);
  }

  Certificate.prototype.all = function(callback) {
    var certificates;
    certificates = [];
    return this.client.get("certificates", {
      page: 1
    }, (function(_this) {
      return function(err, result) {
        var page, pages;
        certificates = result._embedded.certificates;
        page = result.page;
        pages = result.pages;
        return async.until(function() {
          return pages === page;
        }, function(cb) {
          _this.client.get("certificates", {
            page: page + 1
          }, function(err, result) {
            certificates = certificates.concat(result._embedded.certificates);
            page = result.page;
            pages = result.pages;
            return cb(err);
          });
        }, function(err) {
          callback(err, certificates);
        });
      };
    })(this));
  };

  Certificate.prototype.get = function(id, callback) {
    return this.client.get("certificates/" + id, {}, (function(_this) {
      return function(err, result) {
        return callback(err, result);
      };
    })(this));
  };

  Certificate.prototype.download = function(id, format, callback) {
    return this.client.download("certificates/" + id + "/download", {
      format: format
    }, callback);
  };

  Certificate.prototype.reissue = function(id, request, callback) {
    return this.client.post("certificates/" + id + "/reissue", request.toArray(), callback);
  };

  Certificate.prototype.renew = function(id, request, callback) {
    return this.client.post("certificates/" + id + "/renew", request.toArray(), callback);
  };

  Certificate.prototype.cancel = function(id, reason, revoke, callback) {
    return this.client.post("certificates/" + id + "/cancel", {
      reason: reason,
      revoke: revoke
    }, callback);
  };

  return Certificate;

})();

Support = (function() {
  function Support(client) {
    this.client = client;
    this.product = bind(this.product, this);
    this.products = bind(this.products, this);
    this.decodeCSR = bind(this.decodeCSR, this);
    this.approverEmailAddresses = bind(this.approverEmailAddresses, this);
  }

  Support.prototype.approverEmailAddresses = function(domain, callback) {
    return this.client.get("approver-email-addresses", {
      domain: domain
    }, callback);
  };

  Support.prototype.decodeCSR = function(csr, callback) {
    return this.client.post("decode-csr", {
      csr: csr
    }, callback);
  };

  Support.prototype.products = function(callback) {
    var products;
    products = [];
    return this.client.get("products", {
      page: 1
    }, (function(_this) {
      return function(err, result) {
        var page, pages;
        products = result._embedded.products;
        page = result.page;
        pages = result.pages;
        return async.until(function() {
          return pages === page;
        }, function(cb) {
          _this.client.get("products", {
            page: page + 1
          }, function(err, result) {
            products = products.concat(result._embedded.products);
            page = result.page;
            pages = result.pages;
            return cb(err);
          });
        }, function(err) {
          callback(err, products);
        });
      };
    })(this));
  };

  Support.prototype.product = function(id, callback) {
    return this.client.get("products/" + id, {}, (function(_this) {
      return function(err, result) {
        return callback(err, result);
      };
    })(this));
  };

  return Support;

})();

Client = (function() {
  function Client(username, password) {
    this.username = username;
    this.password = password;
    this.post = bind(this.post, this);
    this.download = bind(this.download, this);
    this.get = bind(this.get, this);
    this.r = r.defaults({
      headers: {
        'Accept': 'application/json'
      }
    });
    this.baseUrl = "https://" + this.username + ":" + this.password + "@api.xolphin.com/v1/";
    this.support = new Support(this);
    this.request = new Request(this);
    this.certificate = new Certificate(this);
  }

  Client.prototype.get = function(method, data, callback) {
    if (data == null) {
      data = {};
    }
    return this.r.get({
      url: "" + this.baseUrl + method + "?" + (querystring.stringify(data))
    }, (function(_this) {
      return function(e, r, b) {
        var ref;
        if (e != null) {
          if (typeof callback === 'function') {
            return callback(true, e, b);
          }
        } else {
          if ((200 <= (ref = r.statusCode) && ref < 300)) {
            if (typeof b === 'string') {
              b = JSON.parse(b);
            }
            if (!b.hasOwnProperty('message') && !b.hasOwnProperty('errors')) {
              if (typeof callback === 'function') {
                return callback(false, b, b);
              }
            } else {
              if (typeof callback === 'function') {
                return callback(true, b.message, b);
              }
            }
          } else {
            if (typeof callback === 'function') {
              return callback(true, b, b);
            }
          }
        }
      };
    })(this));
  };

  Client.prototype.download = function(method, data, callback) {
    if (data == null) {
      data = {};
    }
    return this.r.get({
      url: "" + this.baseUrl + method + "?" + (querystring.stringify(data))
    }, (function(_this) {
      return function(e, r, b) {
        var ref;
        if (e != null) {
          if (typeof callback === 'function') {
            return callback(true, e, b);
          }
        } else {
          if ((200 <= (ref = r.statusCode) && ref < 300)) {
            if (typeof callback === 'function') {
              return callback(false, b, b);
            }
          } else {
            if (typeof callback === 'function') {
              return callback(true, b, b);
            }
          }
        }
      };
    })(this));
  };

  Client.prototype.post = function(method, data, callback) {
    if (data == null) {
      data = {};
    }
    return this.r.post({
      url: "" + this.baseUrl + method,
      formData: data
    }, (function(_this) {
      return function(e, r, b) {
        var ref;
        if (e != null) {
          if (typeof callback === 'function') {
            return callback(true, e, b);
          }
        } else {
          if ((200 <= (ref = r.statusCode) && ref < 300)) {
            if (typeof b === 'string') {
              b = JSON.parse(b);
            }
            if (!b.hasOwnProperty('errors')) {
              if (typeof callback === 'function') {
                return callback(false, b, b);
              }
            } else {
              if (typeof callback === 'function') {
                return callback(true, b.message, b);
              }
            }
          } else {
            if (typeof callback === 'function') {
              return callback(true, b, b);
            }
          }
        }
      };
    })(this));
  };

  return Client;

})();

module.exports = {
  Client: Client
};
