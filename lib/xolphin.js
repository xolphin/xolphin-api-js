// Generated by CoffeeScript 1.11.1
(function() {
  var Certificate, Client, Request, Support, async, querystring, r, requests,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  r = require('request');

  async = require('async');

  querystring = require('querystring');

  requests = require('./requests.js');

  Request = (function() {
    function Request(client) {
      this.client = client;
      this.sendComodoSAEmail = bind(this.sendComodoSAEmail, this);
      this.sendNote = bind(this.sendNote, this);
      this.getNotes = bind(this.getNotes, this);
      this.scheduleValidationCall = bind(this.scheduleValidationCall, this);
      this.retryDCV = bind(this.retryDCV, this);
      this.uploadDocument = bind(this.uploadDocument, this);
      this.get = bind(this.get, this);
      this.send = bind(this.send, this);
      this.create = bind(this.create, this);
      this.all = bind(this.all, this);
    }

    Request.prototype.all = function(callback) {
      requests = [];
      return this.client.get("requests", {
        page: 1
      }, (function(_this) {
        return function(err, result) {
          var page, pages;
          requests = result._embedded.requests;
          page = result.page;
          pages = result.pages;
          return async.until(function() {
            return pages === page;
          }, function(cb) {
            _this.client.get("requests", {
              page: page + 1
            }, function(err, result) {
              requests = requests.concat(result._embedded.requests);
              page = result.page;
              pages = result.pages;
              return cb(err);
            });
          }, function(err) {
            callback(err, requests);
          });
        };
      })(this));
    };

    Request.prototype.create = function(product, years, csr, dcvType) {
      return new requests.CreateCertificateRequest(product, years, csr, dcvType);
    };

    Request.prototype.send = function(request, callback) {
      return this.client.post("requests", request.toArray(), callback);
    };

    Request.prototype.createEE = function() {
      return new requests.CreateEERequest();
    };

    Request.prototype.sendEE = function(request, callback) {
      return this.client.post("requests/ee", request.toArray(), callback);
    };

    Request.prototype.get = function(id, callback) {
      return this.client.get("requests/" + id, {}, (function(_this) {
        return function(err, result) {
          return callback(err, result);
        };
      })(this));
    };

    Request.prototype.uploadDocument = function(id, document, description, callback) {
      return this.client.post("requests/" + id + "/upload-document", {
        document: document,
        description: description
      }, callback);
    };

    Request.prototype.retryDCV = function(id, domain, dcvType, email, callback) {
      if (email == null) {
        email = '';
      }
      return this.client.post("requests/" + id + "/retry-dcv", {
        domain: domain,
        dcvType: dcvType,
        email: email
      }, callback);
    };

    Request.prototype.scheduleValidationCall = function(id, dateTime, timezone, callback, phoneNumber, extensionNumber, email, comments, action, language) {
      var request;
      if (timezone == null) {
        timezone = "Europe/Amsterdam";
      }
      if (action == null) {
        action = "ScheduledCallback";
      }
      if (language == null) {
        language = "en_us";
      }
      request = {
        date: dateTime.toISOString().split('T')[0],
        time: dateTime.toISOString().split('T')[1].split('.')[0].substring(0, 5),
        timezone: timezone
      };
      if (phoneNumber !== null) {
        request['phoneNumber'] = phoneNumber;
      }
      if (extensionNumber !== null) {
        request['extensionNumber'] = extensionNumber;
      }
      if (email !== null) {
        request['email'] = email;
      }
      if (comments !== null) {
        request['comments'] = comments;
      }
      if (action !== 'ScheduledCallback') {
        request['action'] = action;
      }
      if (language !== 'en_us') {
        request['language'] = language;
      }
      return this.client.post("requests/" + id + "/schedule-validation-call", request, callback);
    };

    Request.prototype.getNotes = function(id, callback) {
      return this.client.get("requests/" + id + "/notes", {}, (function(_this) {
        return function(err, result) {
          return callback(err, result._embedded.notes);
        };
      })(this));
    };

    Request.prototype.sendNote = function(id, note, callback) {
      return this.client.post("requests/" + id + "/notes", {
        message: note
      }, (function(_this) {
        return function(err, result) {
          return callback(err, result);
        };
      })(this));
    };

    Request.prototype.sendComodoSAEmail = function(id, to, lang, callback) {
      return this.client.post("requests/" + id + "/sa", {
        sa_email: to,
        language: lang
      }, (function(_this) {
        return function(err, result) {
          return callback(err, result);
        };
      })(this));
    };

    return Request;

  })();

  Certificate = (function() {
    function Certificate(client) {
      this.client = client;
      this.cancel = bind(this.cancel, this);
      this.renew = bind(this.renew, this);
      this.reissue = bind(this.reissue, this);
      this.download = bind(this.download, this);
      this.get = bind(this.get, this);
      this.all = bind(this.all, this);
    }

    Certificate.prototype.all = function(callback) {
      var certificates;
      certificates = [];
      return this.client.get("certificates", {
        page: 1
      }, (function(_this) {
        return function(err, result) {
          var page, pages;
          certificates = result._embedded.certificates;
          page = result.page;
          pages = result.pages;
          return async.until(function() {
            return pages === page;
          }, function(cb) {
            _this.client.get("certificates", {
              page: page + 1
            }, function(err, result) {
              certificates = certificates.concat(result._embedded.certificates);
              page = result.page;
              pages = result.pages;
              return cb(err);
            });
          }, function(err) {
            callback(err, certificates);
          });
        };
      })(this));
    };

    Certificate.prototype.get = function(id, callback) {
      return this.client.get("certificates/" + id, {}, (function(_this) {
        return function(err, result) {
          return callback(err, result);
        };
      })(this));
    };

    Certificate.prototype.download = function(id, format, callback) {
      return this.client.download("certificates/" + id + "/download", {
        format: format
      }, callback);
    };

    Certificate.prototype.reissue = function(id, request, callback) {
      return this.client.post("certificates/" + id + "/reissue", request.toArray(), callback);
    };

    Certificate.prototype.renew = function(id, request, callback) {
      return this.client.post("certificates/" + id + "/renew", request.toArray(), callback);
    };

    Certificate.prototype.cancel = function(id, reason, revoke, callback) {
      return this.client.post("certificates/" + id + "/cancel", {
        reason: reason,
        revoke: revoke
      }, callback);
    };

    return Certificate;

  })();

  Support = (function() {
    function Support(client) {
      this.client = client;
      this.product = bind(this.product, this);
      this.products = bind(this.products, this);
      this.decodeCSR = bind(this.decodeCSR, this);
      this.approverEmailAddresses = bind(this.approverEmailAddresses, this);
    }

    Support.prototype.approverEmailAddresses = function(domain, callback) {
      return this.client.get("approver-email-addresses", {
        domain: domain
      }, callback);
    };

    Support.prototype.decodeCSR = function(csr, callback) {
      return this.client.post("decode-csr", {
        csr: csr
      }, callback);
    };

    Support.prototype.products = function(callback) {
      var products;
      products = [];
      return this.client.get("products", {
        page: 1
      }, (function(_this) {
        return function(err, result) {
          var page, pages;
          products = result._embedded.products;
          page = result.page;
          pages = result.pages;
          return async.until(function() {
            return pages === page;
          }, function(cb) {
            _this.client.get("products", {
              page: page + 1
            }, function(err, result) {
              products = products.concat(result._embedded.products);
              page = result.page;
              pages = result.pages;
              return cb(err);
            });
          }, function(err) {
            callback(err, products);
          });
        };
      })(this));
    };

    Support.prototype.product = function(id, callback) {
      return this.client.get("products/" + id, {}, (function(_this) {
        return function(err, result) {
          return callback(err, result);
        };
      })(this));
    };

    return Support;

  })();

  Client = (function() {
    function Client(username, password, test) {
      this.username = username;
      this.password = password;
      this.test = test;
      this._toObject = bind(this._toObject, this);
      this.post = bind(this.post, this);
      this.download = bind(this.download, this);
      this.get = bind(this.get, this);
      this.r = r.defaults({
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'xolphin-api-js/1.6.0'
        }
      });
      if (this.test) {
        this.env = "@xolphin-public-api.loc/v1/";
      } else {
        this.env = "@api.xolphin.com/v1/";
      }
      this.baseUrl = "https://" + this.username + ":" + this.password + this.env;
      this.support = new Support(this);
      this.request = new Request(this);
      this.certificate = new Certificate(this);
    }

    Client.prototype.get = function(method, data, callback) {
      if (data == null) {
        data = {};
      }
      return this.r.get({
        url: "" + this.baseUrl + method + "?" + (querystring.stringify(data))
      }, (function(_this) {
        return function(e, r, b) {
          var ref;
          b = _this._toObject(b);
          if (e != null) {
            if (typeof callback === 'function') {
              return callback(true, e, b);
            }
          } else {
            if ((200 <= (ref = r.statusCode) && ref < 300)) {
              if (!b.hasOwnProperty('message') && !b.hasOwnProperty('errors')) {
                if (typeof callback === 'function') {
                  return callback(false, b, b);
                }
              } else {
                if (typeof callback === 'function') {
                  return callback(true, b.message, b);
                }
              }
            } else {
              if (typeof callback === 'function') {
                return callback(true, b, b);
              }
            }
          }
        };
      })(this));
    };

    Client.prototype.download = function(method, data, callback) {
      if (data == null) {
        data = {};
      }
      return this.r.get({
        url: "" + this.baseUrl + method + "?" + (querystring.stringify(data))
      }, (function(_this) {
        return function(e, r, b) {
          var ref;
          b = _this._toObject(b);
          if (e != null) {
            if (typeof callback === 'function') {
              return callback(true, e, b);
            }
          } else {
            if ((200 <= (ref = r.statusCode) && ref < 300)) {
              if (typeof callback === 'function') {
                return callback(false, b, b);
              }
            } else {
              if (typeof callback === 'function') {
                return callback(true, b, b);
              }
            }
          }
        };
      })(this));
    };

    Client.prototype.post = function(method, data, callback) {
      if (data == null) {
        data = {};
      }
      return this.r.post({
        url: "" + this.baseUrl + method,
        formData: data
      }, (function(_this) {
        return function(e, r, b) {
          var ref;
          b = _this._toObject(b);
          if (e != null) {
            if (typeof callback === 'function') {
              return callback(true, e, b);
            }
          } else {
            if ((200 <= (ref = r.statusCode) && ref < 300)) {
              if (!b.hasOwnProperty('errors')) {
                if (typeof callback === 'function') {
                  return callback(false, b, b);
                }
              } else {
                if (typeof callback === 'function') {
                  return callback(true, b.message, b);
                }
              }
            } else {
              if (typeof callback === 'function') {
                return callback(true, b, b);
              }
            }
          }
        };
      })(this));
    };

    Client.prototype._toObject = function(json) {
      try {
        JSON.parse(json);
      } catch (error) {
        return json;
      }
      return JSON.parse(json);
    };

    return Client;

  })();

  module.exports = {
    Client: Client
  };

}).call(this);
